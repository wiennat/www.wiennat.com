<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>wiennat</title><link>https://www.wiennat.com/</link><description>Recent content on wiennat</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 22 Dec 2022 11:00:00 +0700</lastBuildDate><atom:link href="https://www.wiennat.com/index.xml" rel="self" type="application/rss+xml"/><item><title>ทำไมคนอเมริกันเรียกฟุตบอลว่า Soccer?</title><link>https://www.wiennat.com/posts/soccer-football/</link><pubDate>Thu, 22 Dec 2022 11:00:00 +0700</pubDate><guid>https://www.wiennat.com/posts/soccer-football/</guid><description><![CDATA[<p>หลายเดือนก่อนบอลโลกจะเริ่มต้นขึ้น มีเพื่อนถามว่า ทำไมอเมริกันฟุตบอลถึงถูกเรียกว่าฟุตบอลทั้งๆ ที่มันเตะอยู่แค่แป๊บเดียว พอลองไปหาๆ ดูก็เลยทำให้รู้ว่าทำไมคนอังกฤษเรียกว่า Football แต่คนอเมริกันเรียกฟุตบอลว่า Soccer และรู้มั้ยว่าจริงๆ แล้วอังกฤษเองก็เรียกกีฬาประเภทนี้ว่า Soccer มาก่อนเช่นกัน</p>
<p><img src="IMG_7578.JPG" alt="Football and Soccer"></p>
<p>สรุปแบบเข้าใจง่ายๆ ก็คือ</p>
<ul>
<li>
<p>กีฬาที่ใช้เท้าเล่นมันมีมานานมากแล้ว แล้วก็มีหลายประเภทด้วย</p>
</li>
<li>
<p>กีฬาที่ทุกวันนี้เรียกว่าฟุตบอลนั้น เริ่มมาจากการที่อังกฤษตั้งสมาคมฟุตบอลหรือ Football Association (FA ที่เรารู้จักกันดีนั่นแหละ) ที่คอยกำหนดกฏกติกาสำหรับการเล่นฟุตบอลขึ้นมา เจ้ากีฬาประเภทนี้ก็ได้รีบการเรียกชื่อว่าเป็น <strong>Association Football</strong> เพื่อระบุให้ชัดจากกีฬาฟุตบอลประเภทอื่นๆ อย่าง Rugby football</p>
</li>
<li>
<p>ทีนี้ก็มีคนที่คิดคำเรียกนักกีฬาขึ้นมาเพราะไม่งั้นชื่อมันจะยาว อย่างนักกีฬารักบี้ก็เรียกว่า Rugger และนักกีฬา Association Football ก็เรียกว่า Assoccer แล้วก็เลยโดนกร่อนเสียงให้เหลือแค่คำว่า Soccer ในเวลาต่อมา</p>
</li>
<li>
<p>เพียงแต่ว่าชื่อนี้มันก็เป็นแค่ชื่อเล่น ไม่ได้รับความนิยมอะไรมากนัก พอตอนหลังที่ Association Football ได้รับความนิยมมากเข้า พอพูดถึงฟุตบอล คนก็จะนึกถึง Association Football ก่อน</p>
</li>
<li>
<p>ทีนี้ฝั่งอเมริกาที่มีการเล่นกีฬา gridiron football กันอยู่แล้วก็เลยชินกับการเรียกกีฬา gridiron football ว่าฟุตบอลอยู่แล้ว</p>
</li>
<li>
<p>ดังนั้นนักกีฬา Association Football ในอเมริกาก็เลยเรียกกีฬานี้ว่า Soccer เพื่อไม่ให้สับสนแล้วก็ใช้กันต่อมาเรื่อยๆ</p>
</li>
</ul>
<p>นอกจากอเมริกาแล้ว ประเทศอื่นๆ ที่เวลาพูดถึง Football แล้วเกิดความกำกวมว่าหมายถึงกีฬาฟุตบอลไหน ก็มักจะเลี่ยงไปใช้คำว่า Soccer แทนเวลาพูดถึง Association Football</p>
<p>ref - <a href="https://www.britannica.com/story/why-do-some-people-call-football-soccer">https://www.britannica.com/story/why-do-some-people-call-football-soccer</a></p>
]]></description></item><item><title>Pingora พร็อกซีตัวใหม่ของ Cloudflare ที่มาแทน nginx</title><link>https://www.wiennat.com/posts/pingora/</link><pubDate>Wed, 21 Sep 2022 11:00:00 +0900</pubDate><guid>https://www.wiennat.com/posts/pingora/</guid><description><![CDATA[<p>เมื่อหลายวันก่อน Cloudflare ประกาศว่าได้เปลี่ยนมาใช้พร็อกซีตัวใหม่ที่พัฒนาขึ้นใหม่ทั้งหมดแทนที่ nginx ที่ใช้งานอยู่ก่อนหน้า โดยเหตุผลหลักก็เพื่อแก้ปัญหาจากข้อจำกัดของ nginx เอง โดยในบล็อกมีการอธิบายถึงปัญหาดังกล่าวไว้ด้วย ถึงจะรู้ว่าเราคงไม่น่าจะมีโอกาสได้เจออะไรแบบนี้เท่าไหร่ แต่ก็ทำให้เราได้มีโอกาสเปิดหูเปิดตาว่าในระบบใหญ่ๆ ระดับนี้นั้นมีปัญหาอะไรเกิดขึ้นได้บ้าง</p>
<h1 id="nginx-ในระบบของ-cloudflare">nginx ในระบบของ Cloudflare</h1>
<p>ก่อนเราจะเริ่มไปพูดถึงว่า nginx มีปัญหาอย่างไร เราลองมาดูกันก่อนว่า Cloudflare ใช้งาน nginx อย่างไรบ้าง</p>
<p>ปกติแล้ว Cloudflare จะทำหน้าที่เป็นตัวกลางที่อยู่ระหว่างไคลเอนต์ (เครื่องผู้ใช้, บราวเซอร์, แอปหรืออุปกรณ์ต่างๆ) ที่เรียกใช้งานเซิฟเวอร์ (API Server) โดย Cloudflare นั้นเลือกใช้ nginx เพื่อใช้เป็นพร็อกซี (Proxy) ที่จะส่งต่อการคุยกันระหว่างเครื่องผู้ใช้และเซิฟเวอร์ เมื่อบวกกับการที่ Cloudflare มีเครื่อง edge server ที่อยู่ใกล้กับไคลเอนต์มากๆ ทำให้การใช้งานโดยทั่วไปมีประสิทธิภาพสูงกว่าการเรียกเซิฟเวอร์แบบตรงๆ</p>
<p>หนึ่งในวิธีที่ Cloudflare ใช้เพื่อช่วยเพิ่มประสิทธิภาพก็คือ Connection reuse ซึ่งแทนที่จะต้องสร้าง connection จากพร็อกซีไปยังเครื่องเซิฟเวอร์ทุกครั้งที่มี request เข้ามา ก็ให้ <a href="https://www.nginx.com/blog/load-balancing-with-nginx-plus-part-2/">nginx เก็บ connection เก่าๆ เอาไว้ใน connection pool</a> หากมี request ใหม่ที่ต้องการใช้งานเซิฟเวอร์เดิมก็แค่เอา connection ใน pool ออกมาใช้ เท่านี้ก็ช่วยลดเวลาและหน่วยความจำที่ต้องใช้สร้าง connection ได้แล้ว</p>
<h1 id="ปญหาของ-nginx-ใน-cloudflare">ปัญหาของ nginx ใน Cloudflare</h1>
<figure><img src="connection-pool-cf.png"
         alt="Connection pool ใน Cloudflare"/>
</figure>

<p>ช่วงก่อนหน้านี้ Cloudflare นั้นก็มีการพูดถึงปัญหาในการใช้งาน nginx มาอยู่บ้างคือ</p>
<ol>
<li>ข้อจำกัดของ architecture ที่ nginx ใช้นั้นมีผลต่อ performance
<ul>
<li>nginx ใช้ <a href="https://www.nginx.com/blog/inside-nginx-how-we-designed-for-performance-scale/">worker ในระดับ process</a> และหนึ่ง request จะถูก handle ด้วย process เดียวแบบไม่มี work stealing แปลว่าถ้ามี request ที่ใช้งาน <a href="https://blog.cloudflare.com/the-problem-with-event-loops/">CPU หนักๆ</a> หรือใช้ <a href="https://blog.cloudflare.com/how-we-scaled-nginx-and-saved-the-world-54-years-every-day/">blocked I/O</a> ก็จะทำให้ request อื่นๆ ช้าตามไปด้วย</li>
<li>nginx ยังมีปัญหาว่าจะ <a href="https://blog.cloudflare.com/the-sad-state-of-linux-socket-balancing/">schedule งาน worker</a> แบบไม่เท่าเทียมกัน ทำให้ปัญหาข้างต้นมีผลกว่าเดิม</li>
<li>ไม่มีการแชร์ connection pool ข้าม worker process -  ถ้า process ที่รับ request จะเป็นเครื่องเดียวกันแต่เป็นคนละ process ก็ต้องสร้าง connection ใหม่อยู่ดี</li>
</ul>
</li>
<li>เพิ่มฟีเจอร์อื่นๆ ได้ยาก - ถึง nginx จะมีให้เขียนโมดูลเพิ่มเติมได้ แต่ถ้าไม่เข้ากับสิ่งที่ nginx ออกแบบไว้ก็อาจจะทำได้ยาก</li>
<li>อีกสิ่งที่พูดถึงแต่ละไว้เป็นตัวเล็กๆ คือเดฟของ nginx ไม่ค่อยแอคทีฟในคอมมูนิตี้แต่ไปงุบงิบทำกันเอง</li>
</ol>
<h1 id="แนวทางการแกปญหาของ-cloudflare">แนวทางการแก้ปัญหาของ Cloudflare</h1>
<p>Cloudflare อธิบายว่ามีสามทางเลือกเพื่อแก้ปัญหานี้</p>
<ol>
<li>ใช้งาน nginx ต่อไป - อาจจะต้อง fork project เพื่อปรับให้เข้ากับการใช้งานของ Cloudflare ซึ่งจากปัญหาข้างต้นคิดว่าเป็นงานใหญ่ถึงแม้ว่าบุคลากรจะมีความเชี่ยวชาญ แต่ก็ไม่ใช่เรื่องง่าย</li>
<li>เปลี่ยนไปใช้พร็อกซีตัวอื่นอย่าง Envoy (<a href="https://dropbox.tech/infrastructure/how-we-migrated-dropbox-from-nginx-to-envoy">Dropbox เลือกแนวทางนี้</a>)- กังวลว่าพอใช้ๆ ไปก็จะเกิดปัญหาอื่นที่แก้ไม่ได้ง่ายๆ แบบเดียวกับ nginx อยู่</li>
<li>ทำใหม่หมด - ข้อนี้เหนื่อยสุด เรารู้อยู่แล้วว่า Cloudflare เลือกทางนี้</li>
</ol>
<p>ที่น่าสนใจคือก่อน Cloudflare จะตัดสินใจแบบนี้ก็ได้ประเมินทางเลือกทุกๆ ไตรมาสมาซักระยะแล้ว (ในบทความใช้ว่า for a few years) ซึ่งผลก็คือใช้ nginx ต่อจนสุดท้ายก็เห็นว่าลงทุนทำใหม่เลยคุ้มค่ากว่าก็ค่อยตัดสินใจเริ่มทำของตัวเอง</p>
<h1 id="design-decision-ใน-pingora-project">Design Decision ใน Pingora project</h1>
<p><figure><img src="new-connection-pool-cf.png"
         alt="Connection pool ใน Pingora"/>
</figure>

Cloudflare เลือกใช้ Rust เพราะอยากได้ Performance แบบ C แต่มีความ memory-safe อยู่ อีกเหตุผลน่าจะเพราะว่ามีการใช้ Rust ในหลายๆ โปรดักส์อยู่แล้ว</p>
<ul>
<li>
<p>เลือกจะอิมพลีเมนต์ไลบรารี HTTP ขึ้นมาใหม่เพื่อตอบสนองความใช้งานตัวเอง เพราะไลบรารีที่เป็น 3rd-party อาจจะเลือกทำตามมาตรฐานอย่างเคร่งครัดและปฏิเสธ request ที่ไม่ตรงตามมาตรฐาน แต่ลูกค้าของ Cloudflare นั้นอาจจะใช้ request ที่ไม่ตรงมาตรฐานที่ว่านั้นก็ได้ ทำให้อยู่ในสภาพที่ต้องเลือกระหว่าง “ความถูกต้องหรือความถูกใจ” ซึ่ง Cloudflare เลือกความถูกใจ</p>
</li>
<li>
<p>ใช้ Multi-threading แทน Multi-processing เพื่อแชร์ข้อมูลกันระหว่าง worker โดยเฉพาะ connection pool และ อนุญาตให้มี work stealing เพื่อลดปัญหาที่งานกระจุกอยู่ที่ worker เดียวโดยที่ worker อื่นไม่มีงานทำ</p>
</li>
<li>
<p>ทำเป็น extensible platform ที่ให้กลุ่มอื่นมาเพิ่มฟีเจอร์ได้ง่ายๆ</p>
</li>
</ul>
<h1 id="ผลหลงจากเอา-pingora-มาใช">ผลหลังจากเอา Pingora มาใช้</h1>
<ul>
<li>
<p>หลังจากใช้งานใน production มาระยะหนึ่ง Cloudflare ก็สรุปออกมาว่า Pingora นั้นเร็วกว่า nginx จริงๆ</p>
</li>
<li>
<p>ที่เป็นแบบนี้ก็เพราะมีการแชร์ข้อมูลกันระหว่าง Worker มากขึ้น ทำให้จำนวน connection ที่สร้างต่อวินาทีนั้นเหลือแค่ 1/3 ของระบบเก่า
อัตราส่วนของการใช้ connection ซ้ำในระบบของลูกค้ารายหนึ่งเพิ่มขึ้นจาก 87
1% -&gt; 99
2% หรือถ้าคิดเป็นจำนวน connection ที่สร้างขึ้นใหม่ก็จะเหลือแค่ 1/160 ของของเดิม</p>
</li>
<li>
<p>แล้วพอเป็นของตัวเอง จะทำอะไรก็ง่ายไม่ต้องเสียเวลาคุยกันข้ามองค์กร ทำให้เข็นฟีเจอร์ใหม่ๆ ออกมาได้ง่ายขึ้น</p>
</li>
<li>
<p>ประหยัดขึ้น เพราะใช้ซีพียูน้อยลง 70% ใช้หน่วยความจำน้อยลง 67% เมื่อเทียบกับระบบเดิมและโหลดเท่าเดิม เหตุผลเพราะนอกจาก Rust ทำงานได้มีประสิทธิภาพกว่า Lua แล้วยังไม่ต้องไปใช้การทำงานที่ต้องข้ามไปข้ามมาระหว่าง C &lt;-&gt; Lua แบบใน nginx และอีกเหตุผลคือ พอมีการใช้ซ้ำ connection มากๆ ก็ประหยัดเวลาการทำ TLS handshaking ที่เปลืองเวลาซีพียู</p>
</li>
<li>
<p>สิ่งที่เป็น by product คือปลอดภัยขึ้นเพราะส่วนใหญ่ถ้ามีปัญหาก็มักจะไม่ได้เกิดจาก Pingora ทำให้ตรวจพอปัญหาในจุดอื่นๆ ที่ไม่รู้มาก่อนเพิ่มมากขึ้น</p>
</li>
</ul>
<h1 id="สรป">สรุป</h1>
<p>Cloudflare เปลี่ยนมาทำพร็อกซีของตัวเองเพราะการใช้งาน nginx ต่อไปเริ่มไม่คุ้มค่าแล้ว เหตุผลหลักๆ ก็มาจากสถาปัตยกรรมของ nginx ที่เริ่มตอบโจทย์การใช้งานของ Cloudflare ได้ไม่ดี มีการใช้ reuse connection น้อยเพราะแต่ละ process แชร์ connection pool ไม่ได้
ซึ่งกว่า Cloudflare จะตัดสินใจทำของตัวเองก็ใช้เวลาพิจารณาอยู่หลายปีจนมั่นใจว่าทำแล้วคุ้มแน่ถึงจะเริ่มทำ</p>
<p>แล้วพอทำของตัวเองก็ออกแบบให้เข้ากับการใช้งานของตัวเองเป็นหลัก เลือกทำไลบรารีของตัวเองที่รองรับ request ที่ไม่ได้มาตรฐาน
ผลก็คือได้พร็อกซีตัวใหม่ที่ตอบโจทย์ตรงกับความต้องการทางธุรกิจของตัวเองมากขึ้น ประหยัดต้นทุนของระบบไปได้เยอะ (เปลี่ยนเป็นต้นทุนทรัพยากรมนุษย์แทน)</p>
<!-- raw HTML omitted -->
<p>สรุปจาก: <a href="https://blog.cloudflare.com/how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet/">https://blog.cloudflare.com/how-we-built-pingora-the-proxy-that-connects-cloudflare-to-the-internet/</a></p>
<p>ปล 1. ยังไม่เปิดซอร์สและคิดว่าน่าจะไม่เปิดด้วย</p>
<p>ปล 2. นั่งอ่านไปก็พบว่าคนเขียนบทความนี่แซะ nginx แทบทุกย่อหน้า</p>
]]></description></item><item><title>Starbucks Cup Sizes</title><link>https://www.wiennat.com/posts/starbucks-cup-sizes/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0900</pubDate><guid>https://www.wiennat.com/posts/starbucks-cup-sizes/</guid><description><![CDATA[<p>Starbucks มีชื่อเรียกขนาดแก้วของตัวเองที่ไม่ค่อยเหมือนชาวบ้าน ส่วนตัวปกติก็จะสั่งแก้ว Tall แต่ก็ไม่เคยจำได้ซักทีว่าจริงๆ แล้วเจ้าไซส์ Tall มันขนาดเป๊ะๆ เท่าไหร่</p>
<p>หลักๆ แล้วเครื่องดื่มในร้านจะมีทั้งหมดสี่ขนาดคือ short, tall, grande, venti และมี trenta ที่ไม่เคยเห็นบนเมนู</p>
<ul>
<li><strong>short</strong> (8 oz) → 236 ml</li>
<li><strong>tall</strong> (12 oz) → 354 ml</li>
<li><strong>grande</strong> (16 oz) → 473 ml</li>
<li><strong>venti (hot)</strong> (20 oz) → 591 ml</li>
<li><strong>venti (cold)</strong> (24 oz) → 709 ml</li>
<li><strong>trenta</strong> (31 oz) → 916 ml อันนี้ไม่เคยเห็นในญี่ปุ่น ไม่รู้ว่าสั่งได้มั้ย</li>
</ul>
<p>เมนูไหนที่ไม่ได้เขียนว่ามี Short ก็อาจจะขอสั่งขนาดเป็น short ได้</p>
<p>พอจำได้ก็ดูคลิปนี้ต่อ</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/SSk0B0dVq4g" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen="allowfullscreen" title="YouTube Video"></iframe>
</div>

<p>ref - <a href="https://customerservice.starbucks.com/app/answers/detail/a_id/3113/~/what-are-the-sizes-of-starbucks-drinks">https://customerservice.starbucks.com/app/answers/detail/a_id/3113/~/what-are-the-sizes-of-starbucks-drinks</a></p>
]]></description></item><item><title>Surprisingly Synchronization</title><link>https://www.wiennat.com/posts/surprisingly-synchronization/</link><pubDate>Tue, 10 May 2022 00:00:00 +0900</pubDate><guid>https://www.wiennat.com/posts/surprisingly-synchronization/</guid><description><![CDATA[<p>เมื่อบ่ายวันก่อนลองกดวิดีโอของ <a href="https://www.youtube.com/channel/UCHnyfMqiRRG1u-2MsSQLbXA">Veritasium</a> ที่ชื่อ &ldquo;The Surprising Secret of Synchronization&rdquo; มาดูเพราะมันขึ้นมาเป็นวิดีโอแนะนำหลังจากวิดีโอที่ดูอยู่จบ</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/t-_VPRCtiUg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen="allowfullscreen" title="YouTube Video"></iframe>
</div>

<p>คร่าวๆ ก็คือเค้าอธิบายว่ามันมีเหตุการณ์ที่เกิดในลักษณะที่เป็นคาบบางอย่างที่ในช่วงแรกๆ อาจจะเกิดไม่พร้อมกัน แต่พอเวลาผ่านไปจะมีการปรับสมดุลให้มันเกิดขึ้นพร้อมๆ กันขึ้นมา
โดยเค้ายกตัวอย่างคือลูกตุ้มนาฬิกาสองลูกที่ตอนแรกอาจจะแกว่งไม่พร้อมกัน แต่ก็กลับมาพร้อมกันทีหลัง หรือว่าเมโทรนอมที่เริ่มไม่พร้อมกันแล้วก็ค่อยๆ ปรับจนพร้อมกัน หรือแม้กระทั่งหิ่งห้อยนั้นจะปรับให้ตัวเองเปล่งแสงพร้อมๆ กับตัวอื่น
ซึ่งบางครั้งมันดันมีผลกับการใช้ชีวิตด้วยเช่น <a href="https://en.wikipedia.org/wiki/Millennium_Bridge,_London">มิลเลนเนียมบริดจ์</a> ที่แกว่งตัวตอนเวลาคนเดินข้ามเยอะๆ</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/y2FaOJxWqLE" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen="allowfullscreen" title="YouTube Video"></iframe>
</div>

<p>หรือ<a href="https://en.wikipedia.org/wiki/Broughton_Suspension_Bridge">สะพาน Broughton</a> ที่ถล่มในช่วงที่ทหารเดินสวนสนามผ่าน</p>
<p>ว่าง่ายๆ คือแรงกระทำตอนที่ทหารตบเท้าพร้อมกันมากๆ มันช่วยเสริมกันและกันจนมีผลต่อโครงสร้างของสะพานจนถล่มลงมานั่นเอง และนี่ก็เป็นเหตุผลที่สะพานหลายๆ แห่งจะต้องให้ทหารเดินไม่พร้อมกันช่วงข้ามสะพาน</p>
<p>ที่น่าประหลาดใจก็คือ บ่ายวันนั้นก็มี<a href="https://www.allkpop.com/article/2022/05/after-2-months-of-investigation-architecture-experts-conclude-that-tremors-at-the-sm-entertainment-building-were-caused-by-concentrated-rhythmic-group-movement?fbclid=IwAR1lJ766oReoDDdEdor81Au-wvi3vPyr85L3o3rAu80IEUVEmDCYItyDoU8">ข่าวผลการสำรวจที่ตึกของ SM Entertainment สั่นพอดี</a>
ผู้เชี่ยวชาญรายงานผลการสำรวจว่าการสั่นเกิดจากการซ้อมเต้นที่มีอย่างหนาแน่น (concentrated) ในชั้น 9 และ 10 ซึ่งก็ตรงกับชั้นที่ SM Entertainment เช่าไว้ทำเป็นห้องซ้อมพอดี</p>
<p>ก็นับว่าเป็นเรื่องประหลาดดีเหมือนกันที่ได้ดูวิดีโออธิบายแล้วก็มาอ่านข่าวนี้ต่อ เลยเข้าใจมากขึ้นว่ามันน่าจะเกิดจากอะไร</p>
]]></description></item><item><title>โค้ดสำหรับทดสอบ Connection reset by peer</title><link>https://www.wiennat.com/posts/test-connection-reset-by-peer/</link><pubDate>Mon, 25 Apr 2022 11:30:00 +0900</pubDate><guid>https://www.wiennat.com/posts/test-connection-reset-by-peer/</guid><description><![CDATA[<p>หลายเดือนก่อนเจอปัญหาที่แก้ไม่ตกว่าทำไมอยู่ๆ ก็มี log ที่ API Server ที่เขียนด้วย Kotlin บอกว่าดึงข้อมูลไม่ได้ออกมาเต็มไปหมด
พอเช็คในรายละเอียดของ log พบว่าทุกอันชี้ไปที่สาเหตุเดียวกันหมดคือ <code>MonoCoroutine was canceled</code> แต่ก็ไม่ได้มีรายละเอียดอะไรมากไปกว่านั้น</p>
<p>หลังจากหามาอยู่สองเดือนก็เดาว่ามันน่าจะเกิดจากการที่อีกฝั่งตัดการเชื่อมต่อไปโดยไม่บอก (Connection reset by peer) เลยไปตามหาโค้ดที่ใช้ทดสอบมาเป็น Java ประมาณนี้</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-java" data-lang="java"><span style="color:#f92672">package</span> net.onedd<span style="color:#f92672">;</span>

<span style="color:#f92672">import</span> java.io.BufferedReader<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.io.InputStreamReader<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.io.PrintWriter<span style="color:#f92672">;</span>
<span style="color:#f92672">import</span> java.net.Socket<span style="color:#f92672">;</span>

<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Application</span> <span style="color:#f92672">{</span>
    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;starting&#34;</span><span style="color:#f92672">);</span>
        Socket s <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Socket<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;localhost&#34;</span><span style="color:#f92672">,</span> 5000<span style="color:#f92672">);</span>
        PrintWriter out <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> PrintWriter<span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">getOutputStream</span><span style="color:#f92672">(),</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
        BufferedReader in <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BufferedReader<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> InputStreamReader<span style="color:#f92672">(</span>s<span style="color:#f92672">.</span><span style="color:#a6e22e">getInputStream</span><span style="color:#f92672">()));</span>
        out<span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;GET /echo?m=a HTTP/1.1&#34;</span><span style="color:#f92672">);</span>
        out<span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">);</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div>]]></description></item><item><title>หวยญี่ปุ่น ซื้อแล้วเงินไปไหน</title><link>https://www.wiennat.com/posts/lotterry/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0900</pubDate><guid>https://www.wiennat.com/posts/lotterry/</guid><description><![CDATA[<p>เมื่อสองสามปีก่อนดูรายการขอตามไปบ้าน (家ついていっていいですか？)　แล้วมีการพูดถึงว่ารายได้จากการซื้อลอตเตอรี่ในญี่ปุ่นนั้นจะถูกบริจาคเพื่อไปทำประโยชน์ให้สาธารณะ บวกกับว่าปีก่อนมีประเด็นเรื่องเงินบริจาคของกองสลาก ก็เลยสงสัยขึ้นมาว่า รายได้จากการขายหวยของญี่ปุ่นนั้นถูกจัดสรรปันส่วนยังไง</p>
<p>อ้างอิงจากเว็บไซต์ <a href="https://www.takarakuji-official.jp/about/proceeds/top.html">https://www.takarakuji-official.jp/about/proceeds/top.html</a> ระบุรายละเอียดของรายได้และการใช้จ่ายเงินของสมาคมหวยของญี่ปุ่นไว้ดังนี้</p>
<ul>
<li>ยอดจัดจำหน่ายทั้งหมดของปีเรวะที่ 2 อยู่ที่ <strong>816 พันล้านเยน (หรือแปดแสนล้านเยน)</strong> คิดเป็นเงินไทยก็ประมาณสองแสนล้านบาทนิดๆ</li>
<li><strong>47.0% (383.9 พันล้านเยน ประมาณแสนล้านบาท)</strong> - ใช้เพื่อเป็นเงินรางวัล</li>
<li><strong>36.6% (298.2 พันล้านเยน ประมาณเกือบๆ เก้าหมื่นล้านบาท)</strong> - มอบให้เมืองต่างๆ เพื่อใช้พัฒนาสาธารณประโยชน์ เช่นป้องกันและแก้ปัญหาผู้สูงอายุ ปัญหาเด็กเกิดน้อย ภัยธรรมชาติ ฯลฯ</li>
<li><strong>15.5%</strong> - ค่าสิ่งพิมพ์ ค่าใช้จ่ายเพื่อจัดจำหน่าย</li>
</ul>
<p>ส่วนของไทย เว็บไซต์ของกองสลากมีระบุไว้เหมือนกันในหน้านี้ <a href="https://www.glo.or.th/about/performance/revenue">https://www.glo.or.th/about/performance/revenue</a></p>
<p>以上</p>]]></description></item><item><title>Imakita Sangyou</title><link>https://www.wiennat.com/posts/imakita-sangyou/</link><pubDate>Fri, 04 Mar 2022 18:26:00 +0900</pubDate><guid>https://www.wiennat.com/posts/imakita-sangyou/</guid><description><![CDATA[<p>คำว่า <strong>今北産業</strong> แปลเป็นไทยแบบสวยๆ ได้ว่า <strong>อิมาคิตะอุตสาหการ</strong> ฟังดูแล้วอาจจะฟังดูเหมือนชื่อกิจการหรือชื่อบริษัทอะไรซักอย่าง แต่ความจริงแล้วกลับไม่ได้มีความหมายแบบนั้นเลยแม้แต่นิดเดียว</p>
<hr>
<p>คำว่า  <strong>今北産業</strong> เป็นคำสแลงในภาษาญี่ปุ่น ว่ากันว่ามีต้นกำเนิดมาจากบอร์ด 2ch โดยคันจิสี่ตัวนี้ที่อ่านว่า อิมาคิตะซังเกียว มันไปพ้องกับคำว่า</p>
<ul>
<li>「いま」หรือ「今」อ่านว่า อิมะ แปลว่าตอนนี้</li>
<li>「きた」อ่านว่า คิตะ แปลว่า มาแล้ว และพ้องเสียงกับคำว่า 「北」ที่แปลว่าทิศเหนือ</li>
<li>「３行」อ่านว่า ซังเกียว แปลว่า สามบรรทัด และพ้องกับคำว่า 「産業」ที่แปลว่าอุตสาหกรรม</li>
</ul>
<p>พอเอาทั้งสามคำมาติดกัน มันก็จะกลายเป็นภาษาปากที่ถ้าเคยเรียนภาษาญี่ปุ่นมา
หลายคนก็น่าจะพอเข้าใจได้ว่ามันย่อมาจากเต็มๆ ว่า <em>「今来た（から）、（状況を）3行（で説明して）」</em>
หรือแปลเป็นภาษาไทยได้ว่า <em>”เพิ่งมาอะ ขอสรุปสั้นๆ สามบรรทัด”</em> นั่นเอง ให้ลองนึกถึงว่าเราล็อกอินเข้ามาในห้องแชทหรือในเกม แล้วเพื่อนกำลังคุยอะไรกันอยู่ซักอย่างแต่เราไม่เข้าใจเลย ก็เลยบอกว่า <em>&ldquo;อิมาคิตะซังเกียว&rdquo;</em> เพื่อให้เพื่อนๆ อธิบายให้ฟัง</p>
<h2 id="ออ-มนคอ-tldr-เวอรชนญปนสนะ">อ๋อ มันคือ TL;DR เวอร์ชันญี่ปุ่นสินะ</h2>
<p>พอถึงตรงนี้คงมีคนคิดว่า <strong>อิมาคิตะซังเกียว</strong> คือ <strong>TL;DR</strong> หรือ <strong>Too long. Don&rsquo;t read</strong> เวอร์ชันภาษาญี่ปุ่นสินะ</p>
<p>แต่จริงๆ  มันมีความต่างกันอยู่นิดหน่อยตรงที่ว่า <strong>อิมาคิตะซังเกียว</strong> นั้นมักจะถูกใช้ในบริบทที่ผู้พูดตามสถานการณ์ไม่ทันเพราะเพิ่งเข้าสู่บทสนทนาในช่วงที่สถานการณ์ดำเนินไปมากแล้ว ก็เลยขอให้คนอื่นอธิบายให้ ยกตัวอย่างเช่นเพื่อนของเรากำลังเล่น MMORPG กันอยู่แล้วกำลังวางแผนจะทำอะไรซักอย่าง แต่เราที่เพิ่งล็อกอินเข้ามาในเกมก็จะไม่รู้ว่ากำลังคุยเรื่องอะไรอยู่ ก็เลยขอให้คนอื่นอธิบายให้ฟัง (คือต่อให้ตามอ่านได้ก็อาจจะนานหรือก็ตามไม่ทันอยู่ดี)
แต่เราจะไม่ค่อยเห็นคนใช้ในกรณีที่ว่า <em>ผู้พูดคิดว่าเนื้อหายาวเกินไปแล้วเลยอยากจะขอสรุปให้คนอื่นสั้นๆ</em> แบบเดียวกับที่เราเห็นในการใช้งาน TL;DR</p>
<p>และเนื่องจากคำว่า <strong>อิมาคิตะซังเกียว</strong> เป็นคำสแลงที่ใช้มากในหมู่วัยรุ่น เราจึงไม่ค่อยเห็นในการใช้งานในชีวิตประจำวันเท่าไหร่</p>
<p>ส่วน <strong>TL;DR</strong> นั้นอาจจะใช้ในกรณีที่ผู้พูดรู้สึกว่า “ที่กำลังคุยกันอยู่ยาวมาก ไม่อ่านละ ไปสรุปมาให้หน่อย” หรืออาจจะใช้ในบริบทที่ผู้พูดรู้สึกว่าเนื้อหามันยาวมาก เลยต้องการจะสื่อว่า “สำหรับคนที่ขี้เกียจอ่าน เดี๋ยวจะสรุปให้ฟัง” ก็ได้</p>
<p>นอกจากนี้การใช้งาน TL;DR ในบริบทที่ผู้พูดอยากให้คนอื่นสรุปเนื้อหาให้นี่ฟังแล้วเหมือนเป็นประโยคคำสั่ง
ทำให้ผู้ฟังรู้สึกว่าผู้พูดเป็นคนก้าวร้าวได้ ดังนั้นควรต้องระวังการใช้งานให้ดี</p>
<h2 id="ตวอยางการใชงาน">ตัวอย่างการใช้งาน</h2>
<p>เมื่อเห็นคนพูดถึงแม่แตงโมกันเต็มฟีด แต่ไม่เข้าใจว่าพูดถึงเรื่องอะไรก็เลยบอกว่า　&ldquo;เรื่องแม่แตงโม อิมาคิตะซังเกียว&rdquo; หรือ &ldquo;ขอสรุปสั้นๆ สามบรรทัดเรื่องแม่แตงโม&rdquo;</p>
<p>以上</p>
]]></description></item><item><title>เซต ssh ให้ใช้ Github ได้หลายแอคเคาท์</title><link>https://www.wiennat.com/posts/multiple-github-account/</link><pubDate>Sun, 31 Oct 2021 11:40:21 +0900</pubDate><guid>https://www.wiennat.com/posts/multiple-github-account/</guid><description><![CDATA[<p>ปกติแล้ว Github แนะนำให้ใช้แอคเคาท์เดียวสำหรับทั้งเรื่องงานและเรื่องส่วนตัว แต่สำหรับบางกรณีที่ต้องใช้มากกว่า 1 แอคเคาท์ เช่นมีการใช้ dotfiles ร่วมกัน หรือใช้ Github สำหรับจดบันทึกส่วนตัว (เช่นใช้ Obsidian) ถ้าเป็นเมื่อก่อนอาจจะยอมใช้ HTTP Protocol แล้วใส่พาสเวิร์ดเอาแทนได้ แต่พอ Github เลิกรองรับการใช้งานพาสเวิร์ดก็เลยต้องมาออกแรงมากขึ้นหน่อยด้วยการเซต SSH config เพิ่ม</p>
<p>สมมติว่าเรามีแอคเคาท์ชื่อ <code>my-personal-account</code> กับ <code>my-work-account</code></p>
<ol>
<li>
<p>ให้สร้าง ssh public/private key pairs ของทั้งสอง เซฟในชื่อที่ต่างกัน เช่น <code>my-personal-account กับ my-personal-account.pub</code> และ <code>my-work-account กับ my-work-account.pub</code></p>
</li>
<li>
<p>เลือกว่าจะให้แอคเคาท์ไหนจะให้เป็นแอคเคาท์หลัก กรณีนี้สมมติว่าให้ <code>my-personal-account</code> เป็นแอคเคาท์หลัก</p>
</li>
<li>
<p>ในไฟล์​ <code>~/.ssh/config</code> ให้กำหนดค่าแบบนี้</p>
<pre><code>Host github.com
    HostName github.com
    User git
    AddKeysToAgent yes
    UseKeychain yes
    IdentityFile ~/.ssh/my-personal-account

Host github.com-work
    HostName github.com
    User git
    AddKeysToAgent yes
    UseKeychain yes
    IdentityFile ~/.ssh/my-work-account
</code></pre>
</li>
<li>
<p>สำหรับแอคเคาท์หลักก็ใช้คำสั่งตามปกติ แต่เวลาเราจะใช้งาน repo ที่เป็นของแอคเคาท์ทำงานก็ใช้วิธี git clone ด้วยการเติม <code>-work</code> เข้าไปท้าย <code>github.com</code> แบบคำสั่งข้างล่างนี้แทน โดยที่ตรง <code>(your repo)</code> นี่ก็ใส่เป็นชื่อ repo ที่ต้องการ</p>
<pre><code>git clone git@github.com-work:(your repo)
</code></pre>
<p>เช่น</p>
<pre><code>git clone git@github.com-work:my-work-accont/myrepo.git
</code></pre>
</li>
<li>
<p>คำสั่งอื่นๆ ก็ใช้งานตามปกติ</p>
</li>
</ol>
<h2 id="ขอควรระวง">ข้อควรระวัง</h2>
<p>ถึงแม้ว่าเราจะโคลนตัว repo มาได้แต่ว่าเวลาเรา commit code มันอาจจะเป็นชื่อและอีเมลที่เราใช้กับแอคเคาท์อื่นก็ได้ ดังนั้นคนที่กลัวว่าชื่อ/อีเมลจะปนกันก็ควรจะ <strong>ต้องตรวจสอบ .git/config ทุกครั้งหลังจาก clone ว่าตั้งค่า git.user และ git.email ถูกต้อง</strong></p>]]></description></item><item><title>2021 Facebook Outage</title><link>https://www.wiennat.com/posts/2021-facebook-outage/</link><pubDate>Tue, 05 Oct 2021 08:40:30 +0900</pubDate><guid>https://www.wiennat.com/posts/2021-facebook-outage/</guid><description><![CDATA[<p>เมื่อวาน facebook.com รวมทั้งบริการอื่นๆ ของเฟซบุ๊กทั้ง Whatsapp, Instagram ล่มทั้งหมดเพราะมีข้อผิดพลาดเกิดขึ้นที่ระดับ BGP ถึงโลกจะสงบสุขชั่วคราว แต่เชื่อว่าวิศวกรของเฟซบุ๊กน่าจะวุ่นวายกันมากเป็นพิเศษ
ระหว่างที่รอทางเฟซบุ๊กออก Post-mortem มา เราก็สามารถอ่าน<a href="https://blog.cloudflare.com/october-2021-facebook-outage/">สรุปที่ Cloudflare สรุปเหตุการณ์จากมุมมองคนนอกเอาไว้</a> แทน</p>
<p>ในรายงานของ Cloudflare เล่ารายละเอียดว่าเกิดอะไรขึ้นที่ฝั่ง Cloudflare ในช่วงเวลาที่เกิดปัญหาขึ้น โดยก็ไม่ได้ลงลึกหรือเดาว่าเกิดอะไรขึ้นที่ฝั่งเฟซบุ๊ก
กล่าวโดยสรุปก็คือมีการแก้ไขข้อมูลที่ BGP แล้วก็ทำให้ DNS ของฝั่งเฟซบุ๊กหายไปจากอินเทอร์เน็ต พอ DNS หายไปทุกอย่างที่ผูกกับ DNS ตัวนี้ก็หายไปด้วยรวมทั้ง <a href="https://status.fb.com/">https://status.fb.com/</a> ที่<a href="https://twitter.com/Nick_Craver/status/1445160195991166980?s=20">แม้จะอยู่บน Cloudfront</a> ก็ได้รับผลกระทบไปด้วย</p>
<p>ส่วนที่คาดไม่ถึงของเหตุการณ์นี้ที่อยู่ในสรุปก็คือการล่มครั้งนี้ยังส่งแรงกระเพื่อมไปยังบริการ DNS ต่างๆ ด้วย คือพออุปกรณ์และแอปต่างๆ ไม่สามารถ resolve ชื่อโดเมนของเฟซบุ๊กไม่ได้ ผู้ใช้ก็อาจจะกดให้ refresh เพื่อลองใหม่ บวกกับตัวแอปเองก็อาจจะลอง resolve ชื่อโดเมนไปเรื่อยๆ ด้วยทำให้เกิดทราฟฟิกเพิ่มขึ้นมหาศาล จนทำให้บริการ DNS อย่าง 1.1.1.1 ของ Cloudflare หรือ <a href="https://twitter.com/awlnx/status/1445073290708533258">8.8.8.8 ของกูเกิลต้องรับภาระหนัก</a>มากขึ้น</p>
<p>ถ้าข้ามไปฝั่ง <a href="https://krebsonsecurity.com/2021/10/what-happened-to-facebook-instagram-whatsapp/">Krebs on Security</a> ก็จะมีอธิบายสรุปพร้อมกับรายงานสดความคืบหน้าของเหตุการณ์แทน</p>]]></description></item><item><title>รายได้เฉลี่ยของคนญี่ปุ่น</title><link>https://www.wiennat.com/posts/japanese-average-income/</link><pubDate>Sat, 06 Feb 2021 09:05:05 +0900</pubDate><guid>https://www.wiennat.com/posts/japanese-average-income/</guid><description><![CDATA[<p>วันก่อนเห็นข่าวว่ารัฐบาลญี่ปุ่นจะมีการแก้กฏหมายเพื่อ<a href="https://www3.nhk.or.jp/news/html/20210202/k10012845011000.html">ยกเลิกเงินสนับสนุนการเลี้ยงดูเด็กสำหรับครอบครัวผู้มีรายได้สูง</a> คือมีรายได้ต่อปีเกิน 12 ล้านเยน ก็เลยสงสัยเกี่ยวกับรายได้เฉลี่ยของคนญี่ปุ่นขึ้นมา</p>
<p>ด้วยความที่เคยอ่านผ่านๆ ตามาว่ารายได้ต่อปีเฉลี่ยของคนญี่ปุ่นจะอยู่ที่ประมาณ 6 ล้านเยน ดังนั้นพอบอกว่ารายได้สูงคือ 12 ล้านเยนก็รู้สึกว่าเยอะเหมือนกันนะ
แต่พอนึกถึงว่าเป็นครอบครัวที่ทั้งสามีภรรยาทำงานทั้งคู่ ตัวเลข 12 ล้านเยนมันก็กลายเป็นธรรมดาขึ้นมาทันที พอแบบนี้ก็เลยรู้สึกว่าแล้วรายได้เฉลี่ยต่อครอบครัว จริงๆ แล้วมันเท่าไหร่กันแน่</p>
<p><figure><img src="fig1.png"
         alt="การกระจายตัวของรายได้เฉลี่ยต่อครอบครัวต่อปี source: กระทรวงสาธารณสุข แรงงานและสวัสดิการญี่ปุ่น"/>
</figure>

จาก<a href="https://www.mhlw.go.jp/toukei/saikin/hw/k-tyosa/k-tyosa17/dl/03.pdf">ผลสำรวจรายได้ครอบครัวที่มีขนาด 2 คนขึ้นไปของกระทรวงสาธารณสุข แรงงานและสวัสดิการญี่ปุ่นในปี 2019</a>จะเห็นว่ารายได้เฉลี่ยต่อครอบครัวของคนญี่ปุ่นจะอยู่ที่ประมาณ 5.52 ล้านเยน โดยที่มีค่ามัธยฐานอยู่ที่ 4.37 ล้านเยน ส่วนจำนวนครอบครัวที่มีรายได้เกิน 12 ล้านเยนมีอยู่ประมาณ 7.2% เท่านั้นเอง</p>
<p>พอลองไปดูผลสำรวจ<a href="https://doda.jp/guide/heikin/">เงินเดือนเฉลี่ยสำหรับพนักงานประจำของญี่ปุ่นที่จัดทำโดยเว็บไซต์หางาน doda</a> สำหรับปี 2020 จะพบว่ารายได้เฉลี่ยอยู่ที่ประมาณ 4.1 ล้านเยน โดยที่ถ้าดูเฉพาะช่วงอายุ 40 - 60 ซึ่งเป็นช่วงอายุที่น่าจะมีครอบครัวแล้วก็จะมีรายได้เฉลี่ยอยู่ที่ 5.1 - 6.1 ล้านเยน</p>
<p>ทีนี้พอมาดูผลสำรวจของ<a href="http://www.stat.go.jp/english/data/kakei/156index.html">สำนักงานสถิติของญี่ปุ่น</a> ดูจะได้ตัวเลขของปี 2019 ว่ามีรายได้เฉลี่ยที่ประมาณ 5.1 ล้านเยนแต่ตัวเลขที่น่าสนใจคือถึงแม้ขนาดครอบครัวเฉลี่ยอยู่ที่ 2.3 คน แต่มีจำนวนผู้ที่มีรายได้อยู่ที่ 1.03 คนเท่านั้น ซึ่งก็คือส่วนใหญ่แล้วเป็นครอบครัวที่มีรายได้หลักทางเดียว</p>
<p>ส่วนที่เคยเห็นผ่านๆ ตอนดูหนังสือแนะนำบริษัทที่รับเด็กจบใหม่เมื่อหลายปีก่อน ก็จำได้ว่าเงินเดือนของเด็กป.โทจบใหม่ส่วนใหญ่อยู่ที่ประมาณ 220000 - 240000 เยน (คิดเป็นต่อปีคือประมาณ 2.6 - 2.8 ล้าน)</p>
<p>ก็นับว่าเงินเดือนสตาร์ทของสาขาไอทีที่เริ่มต้นที่ราวๆ 3 ล้านเยนกลางๆ ไปจนถึง 6 ล้านเยน นี่ก็นับว่าเยอะมากจริงๆ ยิ่งพอมาเทียบกับรายชื่อบริษัทใน <a href="https://gaijininjapan.blog/10-jp-tech-companies">10 บริษัทไอทีในญี่ปุ่นที่ใช้ภาษาอังกฤษ ที่น่าทำงานด้วย</a> แล้วยิ่งรู้สึกเห็นถึงความแตกต่าง</p>
<p>สรุปก็คือรายได้เกิน 12 ล้านบาทต่อปีถึงแม้ว่าจะดูไม่เยอะ เพราะถ้าทำงานทั้งสามีภรรยามันก็น่าจะถึงได้ไม่ยากมาก
แต่พอดูที่การกระจายตัวของรายได้แล้วก็เป็นส่วนน้อยจริงๆ ที่มีรายได้เกิน 12 ล้านเยนเพราะส่วนใหญ่เป็นครอบครัวที่มีรายได้หลักแค่ทางเดียว</p>
<p>PS. รายได้ 12 ล้านเยน หักภาษีต่างๆ แล้วจะเหลือเทคโฮมประมาณ 8.6 ล้านเยน</p>]]></description></item><item><title>CSS Zen Garden</title><link>https://www.wiennat.com/posts/css-zen-garden/</link><pubDate>Mon, 23 Mar 2020 00:00:00 +0900</pubDate><guid>https://www.wiennat.com/posts/css-zen-garden/</guid><description><![CDATA[<p><a href="http://csszengarden.com/">CSS Zen Garden</a> เป็นโปรเจคเก่ามากเปิดตัวมาตั้งแต่สมัยปี 2003
ตัวเว็บไซต์เองจะมี HTML อยู่หนึ่งหน้า แต่ผู้ใช้จะเลือกเปลี่ยน CSS เพื่อเปลี่ยนดีไซน์ของหน้านั้นได้โดยยังใช้ HTML เดิม ซึ่ง CSS พวกนี้ก็คือมาจากเว็บดีไซเนอร์ส่งเข้ามา</p>
<p>ในช่วงนั้น CSS ยังเป็นของที่ใหม่อยู่ ส่วนใหญ่ก็ใช้แค่ตกแต่งสีของลิงค์ แต่ระดับเลย์เอาท์นั้นมักใช้เป็น Table-based layout กันเป็นหลัก
ถึงแม้ว่าแนวทางนี้จะเข้าใจได้ง่ายและบราวเซอร์ต่างๆ ก็รองรับเหมือนกันหมดอยู่แล้ว แต่ก็มีข้อเสียคือถ้าจะเปลี่ยนดีไซน์ของเว็บแม้เล็กน้อยก็อาจจะต้องทำใหม่ทั้งหมดเพราะโครงสร้างของตารางมันไม่ยืดหยุ่นพอ
CSS Zen Garden ก็เลยเหมือนเป็นทั้งแหล่งโชว์ของว่า CSS ทำอะไรและเข้ามาช่วยได้ขนาดไหน และก็เป็นที่โชว์ของของเหล่าเว็บดีไซเนอร์ด้วยว่ามีฝีมือขนาดไหน
เพราะอย่างที่รู้กันว่าบราวเซอร์ต่างๆ ก็รองรับและแสดงผล CSS ได้ต่างกัน ดังนั้นเว็บดีไซเนอร์เหล่านี้ก็เลยต้องงัดเทคนิคมากมายเพื่อให้มาสร้างเป็น CSS ที่แสดงผลได้ถูกต้องในทุกบราวเซอร์</p>
<p>วันก่อนใน Hacker news มี คนเอาลิงค์นี้ไปโพสต์ แล้วในช่อง discussion ก็เกิดประเด็นถกเถียงกันมากว่า HTML กับ CSS เนี่ยมันควรจะแยกกันมั้ย</p>
<p>คือถ้ามาจากสาย CSS Zen Garden มาก่อนก็คงจะให้ความรู้สึกว่า HTML มันแสดงโครงสร้างของเอกสาร เพราะฉะนั้นมันก็ไม่ควรจะต้องมายุ่งเกี่ยวเลยกับการแสดงผลหรือเลย์เอาท์ของหน้าสิ ดังนั้นการเอาคลาสของ CSS สำหรับระบุหน้าตาไปใส่ใน HTML นี่มันก็เหมือนกับการเอา presentation กับ data มาปนกันมั่วไปหมด ใครนึกไม่ออกลองนึกถึงพวก css framework อย่าง Bootstrap ที่จะมีคลาสสำหรับกำหนดกริด กำหนดเลย์เอาท์ สี ช่องไฟอยู่เยอะแยะมากมาย</p>
<p>อีกฝั่งก็ให้เหตุผลว่า html มันก็ถูกใช้สำหรับ presentation เสมอมา มันก็แยกกันไม่ออกแล้วแหละ บางคนก็บอกว่าถ้าทำแบบ pure css เลยจะทำให้ต่างคนต่างทำงานซ้ำซ้อนกันเพราะแต่ละคนก็จะไม่อยากไปแตะโค้ดของส่วนอื่นๆ ทีนี้จะยิ่งลำบากเข้าไปใหญ่ ซึ่งวิธีแก้มันก็คือจะต้องมากำหนด framework ตรงกลางซึ่งก็จะคือวิธีใช้คลาสระบุแบบใน css framework นี่แหละ</p>
<p>จริงๆ ก็คงเป็นเรื่องความชอบกับความเหมาะสมของแต่ละงานมากกว่า แต่เนื่องจากเริ่มรู้จัก CSS ก็จาก CSS Zen Garden ก็เลยชอบแนวทางของฝั่งนี้มากกว่า เพราะโค้ดของ html มันดูเป็นระเบียบเรียบร้อยสะอาดตาเข้าใจง่ายมากกว่าด้วย</p>
<p>แต่ทั้งหมดทั้งมวลถ้าให้สรุปเอง ก็คงจะได้ว่า HTML กับ CSS มันใช้ยากนั่นแหละ</p>
<p>Hacker News discussion: <a href="https://news.ycombinator.com/item?id=22627018">https://news.ycombinator.com/item?id=22627018</a></p>]]></description></item><item><title>Meiji-jingumae Station</title><link>https://www.wiennat.com/posts/meiji-jingumae/</link><pubDate>Sun, 06 Oct 2019 23:23:02 +0900</pubDate><guid>https://www.wiennat.com/posts/meiji-jingumae/</guid><description><![CDATA[<p>เร็วๆ นี้มีข่าวเกี่ยวกับการเปลี่ยนชื่อสถานีรถไฟที่ในแถบคันไซ [1] โดยหลายๆ สถานีใส่ชื่อที่คนทั่วไปรู้จักเข้าไปในช่ือสถานีเพื่อนักท่องเที่ยวกับคนที่มาจากต่างถิ่นใช้งานได้สะดวกมากขึ้น
ก็เลยพาลสงสัยว่า แล้วสถานีอย่างเมจิจิงกูมาเอะ [Meiji-jingumae (Harajuku)] ล่ะ ทำไมต้องมีการใส่วงเล็บว่า Harajuku ทำไมไม่ใช้ชื่อสถานีเดียวกันไปเลย แล้วเริ่มใช้ชื่อนี้มาตั้งแต่เมื่อไหร่</p>
<p>หลังจากหาด้วยกูเกิลดูก็ได้ความว่า ชื่อเดิมของสถานีตอนเปิดบริการในปี 1962 ใช้ชื่อแค่ว่า เมจิจิงกูมาเอะ โดยคาดว่าน่าจะต้องการไม่ให้ชื่อซ้ำกับสถานีฮาราจุกุของ JR ที่อยู่ใกล้ๆ กัน
แต่เนื่องจากทั้งสองสถานีนั้นอยู่ในระยะที่เดินกันถึงและนับเป็นสถานีที่ใช้สำหรับเปลี่ยนสายระหว่างสายยามาโนเตะกับสายชิโยะดะมาตลอด
ทำให้ในปี 2010 มีการตัดสินใจเพิ่มคำว่า [&lt;Harajuku&gt;] ลงไปในชื่อสถานีเพื่อเป็นการย้ำว่าสถานีนี้อยู่ในย่านฮาราจุกุมากขึ้น</p>
<p>ในปัจจุบันสถานีเมจิจิงกูมาเอะเป็นสถานีที่มีจำนวนผู้โดยสายขึ้นลงเป็นอันดับที่ 36 จากทั้งหมด 130 สถานีของโตเกียวเมโทร
โดยในปี 2018 มีผู้ใช้งานเฉลี่ยต่อวันที่ 109528 คน
ส่วนในปี 2010 ที่มีการเปลี่ยนชื่อสถานีนั้นมีผู้โดยสารขึ้นลงเฉลี่ย 74693 คนต่อวัน ลดลงจากปี 2009 ที่มีผู้โดยสารขึ้นลงเฉลี่ย 75434 คนต่อวันหรือลดลงประมาณ 1%</p>
]]></description></item><item><title>Longdo Dict Chrome Bookmarklet</title><link>https://www.wiennat.com/posts/longdo-dict-chrome-bookmarklet/</link><pubDate>Tue, 23 Jul 2019 00:00:00 +0900</pubDate><guid>https://www.wiennat.com/posts/longdo-dict-chrome-bookmarklet/</guid><description><![CDATA[<p>อันนี้เป็น Bookmarklet ใช้สำหรับเวลาจะเปิดหาความหมายคำจาก Longdo Dict</p>
<p>ด้วยความที่ขี้เกียจเขียนให้เป็น Extension ของ Chrome ก็เลยทำมาไว้เป็น Bookmarklet ของจาวาสคริปต์แทน
เวลาใช้ก็ Highlight ประโยคแล้วก็กดที่ปุ่ม Bookmarklet หรือว่ากดที่ Bookmarklet แล้วก็พิมพ์คำที่ต้องการก็จะเปิดหน้าต่างใหม่ของ Longdo Dict ให้เอง</p>
<p>ตอนทำออกมาใหม่ๆ จำได้ว่าทาง Longdo Dict ก็เคยเอาไปแชร์ไว้รอบนึงแล้ว แต่วันก่อนเข้าไปเปิดดูปรากฏว่าลิงค์เดิมที่เก็บโค้ดอันนี้ไว้มันใช้งานไม่ได้แล้ว
เลยขอเอามาแปะใหม่ที่นี่แล้วกัน วิธีติดตั้งก็คือลากข้อความข้างล่างไปแปะเป็น Bookmark ได้เลย</p>
<pre><code>javascript:void(q=window.getSelection?window.getSelection():(document.getSelection?document.getSelection():(document.selection?document.selection.createRange().text:'')));if(q=='')void(q=prompt('Enter a word',''));if(q){void(ldwin=window.open('http://dict.longdo.com/mobile.php?search='+encodeURIComponent(q),'ldwin','width=600,height=600,resizable=yes,scrollbars=yes,toolbar=no,location=no,directories=no,status=yes,menubar=no,copyhistory=no'));void(setTimeout('ldwin.focus()',1));};
</code></pre>]]></description></item><item><title>about</title><link>https://www.wiennat.com/about/</link><pubDate>Sat, 25 May 2019 00:00:00 +0900</pubDate><guid>https://www.wiennat.com/about/</guid><description></description></item><item><title>ชื่อ</title><link>https://www.wiennat.com/posts/chuue/</link><pubDate>Sat, 25 May 2019 00:00:00 +0900</pubDate><guid>https://www.wiennat.com/posts/chuue/</guid><description><![CDATA[<p>คุยกับพี่ที่ทำงานเรื่องชื่อไป เลยขอจดคำศัพท์เกี่ยวกับชื่อไว้เล่นๆ</p>
<ul>
<li>ชื่อต้น ชื่อกลาง ชื่อท้าย – อันนี้น่าจะมาจากคำว่า first/middle/last name</li>
<li>ชื่อตัว – อันนี้เคยได้เห็นใช้ในหนังสือภาษาอังกฤษ หมายถึงชื่อ</li>
<li>上の名前 (ความหมาย: ชื่อบน) –  นามสกุล อันนี้น่าจะเพราะว่าภาษาญี่ปุ่นเวลาเขียนแบบบนลงล่าง นามสกุลที่มาก่อนก็เลยอยู่ข้างบน</li>
<li>下の名前 (ความหมาย: ชื่อล่าง) –  ชื่อตัว เหตุผลเดียวกับข้างบน</li>
<li>姓名（せいめい）・氏名（しめい）– ชื่อนามสกุล</li>
<li>名前 （なまえ）- ชื่อ-นามสกุล หรือชื่ออย่างเดียวก็ได้</li>
<li>名（な）– ชื่อ</li>
<li>名字・苗字（みょうじ）– นามสกุล</li>
<li>芸名 – Stage name หรือพวกนามแฝง</li>
<li>本名（ほんめい、ほんみょう） – ชื่อจริง (ที่ไม่ใช่ stage name หรือพวกชื่อในวงการ)</li>
</ul>
]]></description></item></channel></rss>